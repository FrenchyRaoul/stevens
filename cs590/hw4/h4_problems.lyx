#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "palatino" "default"
\font_sans "helvet" "default"
\font_typewriter "courier" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 95 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 0.5in
\topmargin 0.5in
\rightmargin 0.5in
\bottommargin 0.5in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section*
Homework 4 Exercises
\end_layout

\begin_layout Subsection*
Exercise 15.1-2
\end_layout

\begin_layout Subsubsection*
Show, by means of counterexample, that the following 
\begin_inset Quotes eld
\end_inset

greedy
\begin_inset Quotes erd
\end_inset

 strategy does not always determine an optimal way to cut rods.
 Define the density of the rod of length i to be 
\begin_inset Formula $\frac{p_{i}}{i}$
\end_inset

, that is, its value per inch.
 The greedy strategy for a rod of length n cuts off a piece of length i,
 where 
\begin_inset Formula $1\le i\le n$
\end_inset

, having the maximum density.
 It then continue by applying the greedy strategy to the remaning pieve
 of length n-i.
\end_layout

\begin_layout Standard
For this problem, I create a table of rod values.
\end_layout

\begin_layout Standard
\begin_inset Formula $\begin{array}{ccc}
length\ i & value\ p_{i} & density\ \frac{p_{i}}{i}\\
1 & 1 & 1\\
2 & 1 & 0.5\\
3 & 12 & 4\\
4 & 1 & 0.25\\
5 & 15 & 3
\end{array}$
\end_inset


\end_layout

\begin_layout Standard
Starting with a rod of length 5, it's trivial to see the optimal solution
 is zero cuts, yielding a single rod of length 5, total value of 15.
 However, if we use the greedy strategy:
\end_layout

\begin_layout Enumerate
Starting with a rod of length 5, we see that a rod of length 3 has the highest
 density.
 We make our first cut giving a rod of length 3, and a remainder of length
 2.
\end_layout

\begin_layout Enumerate
Using the remaining rod of length 2, the highest density remaining is length
 1.
 We cut our length 2 rod into two sections of length 1, and the greedy algorithm
 is completed.
\end_layout

\begin_layout Standard
Now, for the greedy approach, we have a total value of 
\begin_inset Formula $p_{3}+p_{1}+p_{1}=12+1+1=14$
\end_inset

.
 However, if we made no cuts at all, we would have had a single rod of length
 5, giving 
\begin_inset Formula $p_{5}=15$
\end_inset

.
 Thus, by counterexample, the greedy strategy did not give an optimal solution.
\end_layout

\begin_layout Subsection*
Exercise 15.1-5
\end_layout

\begin_layout Subsubsection*
The Fibonacci numbers are defined by recurrence (3.22).
 Give an O(n) time dynamic-programming algorithm to compute the n-th Fibonacci
 number.
 Draw the subproblem graph.
 How many vertices and edges are in the graph?
\end_layout

\begin_layout Standard
To solve this with dynamic programming, we solve all of the subproblems
 in a bottom-up approach, starting at 0.
 However, the sequence is pre-defined for zero and one, so we can hard-code
 those values.
 NOTE: These will not show up as vertices in the graph.
 Below is my c++ implementation of a dymanic fibonacci sequence calculator
 for integer n:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int dynamic_fibonacci(int n) {   
\end_layout

\begin_layout Plain Layout

    int fib [n+1];     
\end_layout

\begin_layout Plain Layout

    fib[0] = 0;     
\end_layout

\begin_layout Plain Layout

    fib[1] = 1;
\end_layout

\begin_layout Plain Layout

    for (int i = 2; i <= n; i++) {         
\end_layout

\begin_layout Plain Layout

        fib[i] = fib[i-1] + fib[i-2];     
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    return fib[n]; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The subproblem graph is fairly well behaved; every vertex in our graph depends
 on two previous subproblems.
 Two subproblems, 0 and 1, have no dependencies on previous results, and
 are thus hardcoded.
 Because the fibonacci sequence starts at 0 and not 1, we have a subproblem
 graph with 
\begin_inset Formula $\#V=n+1$
\end_inset

 vertices.
 Each vertex has 2 subproblems, except for vertex 0 and 1.
 Thus, we have 
\begin_inset Formula $\#E=\left(n-1\right)*2$
\end_inset

 total edges.
 Two subproblem graphs are shown, one for n=4, and one for generic n.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fib.drawio.png
	scale 30

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Subproblem graph of dynamic fibnocci algorithm for n=4 (left) and generic
 n (right).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Exercise 15.4-1
\end_layout

\begin_layout Subsubsection*
Determine an LCS of <1,0,0,1,0,1,0,1> and <0,1,0,1,1,0,1,1,0>.
\end_layout

\begin_layout Standard
We will work through this step by step.
 First, noting the final characters do not match, we have two subproblems,
 one LCS with one character removed from either string.
 If the final characters match, then we only have one subproblem; we subtract
 that chracter from both strings, and run our algorithm on the remainder
 two strings.
 This is repeated until we get to the beginning of either string.
 Running this in python, we get the following six character LCS:
\end_layout

\begin_layout Standard
< 0, 1, 0, 1, 0, 1 >
\end_layout

\end_body
\end_document
