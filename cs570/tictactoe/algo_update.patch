Index: Homework_Tic_Tac_Toe/src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Homework_Tic_Tac_Toe/src/main/java/Main.java	(revision 19f3699b8bb0f4fe99f57513c1bed0499dab31ea)
+++ Homework_Tic_Tac_Toe/src/main/java/Main.java	(date 1549645372000)
@@ -3,12 +3,7 @@
 public class Main {
     /*
     * The game is broken into several steps. Take a turn, print the board, remove combinations, check for a winner,
-    * and check for a tie game. I broke out each of the steps to make the program more clear, but it could be optimized.
-    * For instance, removing the impossible combinations, checking the winner, and checking for a tie all iterate over
-    * the same "combos" array. This would be more efficient if there was only one loop. However, in order to more
-    * clearly show my algorithm, I figured it would be easier to separate the three methods. As we are only operating
-    * on a 3x3 board, this works fine.
-    *
+    * and check for a tie game.
     *
     * board: array keeping track of moves
     * turn: A simple way of keeping track of whose turn it is
@@ -31,58 +26,67 @@
     public static void main(String[] args) {
         print_board();
         while (!tie_game) {
+
+            tie_game = true;
+            int[] moves = {(open + 1) / 2, open/2};
+
             take_turn();
             print_board();
-            remove_impossible_combinations();
-            check_winner();
-            tie_game = check_tie();
-            }
-        System.out.print("Players X and O have tied.");
-    }
-
-    private static void print_board() {
-        /*
-        * @param template string template that represents the tic-tac-toe board
-         */
-        String template = " %s | %s | %s\n---+---+---\n %s | %s | %s\n---+---+---\n %s | %s | %s\n";
-        System.out.printf(template, (Object[]) board);
-    }
-
-    private static void check_winner() {
-        for (int[] combo : combos) {
-            List<String> to_check = new ArrayList<>(Arrays.asList(board[combo[0]], board[combo[1]], board[combo[2]]));
-            if ((to_check.get(0).equals(to_check.get(1))) & (to_check.get(1).equals(to_check.get(2)))) {
-                System.out.printf("Player %s has won the game!", turn ? "O" : "X");
-                System.exit(0);
-            }
-        }
-    }
-
-    private static void remove_impossible_combinations() {
-        /*
-        * i: counter for locating winning combination indices
-        * impossible_combo: array of indices of combinations that are not longer winnable by either player
-         */
-        int i = 0;
-        List<Integer> impossible_combo = new ArrayList<>();
-        for (int[] combo : combos) {
-            List<String> to_check = new ArrayList<>(Arrays.asList(board[combo[0]], board[combo[1]], board[combo[2]]));
-            if (to_check.contains("X") & to_check.contains("O")) {
-                impossible_combo.add(i);
-            }
-            i++;
-        }
-        // Remove impossible winning combinations.
-        if (impossible_combo.size() > 0) {
-            impossible_combo.sort(Collections.reverseOrder());
-            for (int idx: impossible_combo) {
-                combos.remove(idx);
-            }
-        }
+            int i = 0;
+            List<Integer> impossible_combo = new ArrayList<>();
+
+            for (int[] combo : combos) {
+                List<String> to_check = new ArrayList<>(Arrays.asList(board[combo[0]],
+                        board[combo[1]],
+                        board[combo[2]]));
+                if (check_impossible_combo(to_check)) {
+                    impossible_combo.add(i);
+                }
+                else {
+                    check_winner(to_check);
+                    if (tie_game) {
+                        tie_game = tie_game & check_tie(to_check, moves);
+                    }
+                }
+                i++;
+            }
+            // Remove impossible winning combinations.
+            if (impossible_combo.size() > 0) {
+                impossible_combo.sort(Collections.reverseOrder());
+                for (int idx: impossible_combo) {
+                    combos.remove(idx);
+                }
+            }
 
+            }
+        System.out.print("Players X and O have tied.");
     }
+
+    private static void print_board() {
+        /*
+        * @param template string template that represents the tic-tac-toe board
+         */
+        String template = " %s | %s | %s\n---+---+---\n %s | %s | %s\n---+---+---\n %s | %s | %s\n";
+        System.out.printf(template, (Object[]) board);
+    }
 
-    private static boolean check_tie() {
+    private static void check_winner(List<String> to_check) {
+        // System.out.print("checking for winnders...");
+        if ((to_check.get(0).equals(to_check.get(1))) & (to_check.get(1).equals(to_check.get(2)))) {
+            System.out.printf("Player %s has won the game!", turn ? "O" : "X");
+            System.exit(0);
+        }
+    }
+
+    private static boolean check_impossible_combo(List<String> to_check) {
+        /*
+        * i: counter for locating winning combination indices
+        * impossible_combo: array of indices of combinations that are not longer winnable by either player
+         */
+        return (to_check.contains("X") & to_check.contains("O"));
+    }
+
+    private static boolean check_tie(List<String> to_check, int[] moves) {
         /*
         * Check to make sure at least one of the possible winning combinations has fewer (or equal) free spaces than
         * remaining moves to be made, for each of the two players. If neither player has a possible winning combination,
@@ -92,22 +96,19 @@
         * moves: array of remaining moves for each player
         * free: array of open moves for any given winning combination
          */
-        boolean[] still_winnable = {false, false};
-        int[] moves = {(open + 1) / 2, open/2};
+
+        boolean[] winnable = {false, false};
         int[] free = {0, 0};
-
-        for (int[] combo : combos) {
-            List<String> to_check = new ArrayList<>(Arrays.asList(board[combo[0]], board[combo[1]], board[combo[2]]));
-            free[0] = 3 - Collections.frequency(to_check, turn ? "X" : "O");
-            free[1] = 3 - Collections.frequency(to_check, turn ? "O" : "X");
-            if ((free[0] <= moves[0]) & (free[1] == 3)) {
-                still_winnable[0] = true;
-            }
-            if ((free[1] <= moves[1]) & free[0] == 3) {
-                still_winnable[1] = true;
-            }
+        free[0] = 3 - Collections.frequency(to_check, turn ? "X" : "O");
+        free[1] = 3 - Collections.frequency(to_check, turn ? "O" : "X");
+
+        if ((free[0] <= moves[0]) & (free[1] == 3)) {
+            winnable[0] = true;
+        }
+        if ((free[1] <= moves[1]) & free[0] == 3) {
+            winnable[1] = true;
         }
-        return !(still_winnable[0] | still_winnable[1]);
+        return !(winnable[0] | winnable[1]);
     }
 
     private static void take_turn() {
